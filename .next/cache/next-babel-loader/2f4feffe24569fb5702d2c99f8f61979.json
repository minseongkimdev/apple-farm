{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/gimminseong/side_project/apple_farm/pratice/apple-farm/src/pages/index.js\";\nexport { default as Home } from './home';\nimport { useSelector } from 'react-redux';\nimport AppLayouts from '../components/AppLayouts';\nimport PostCard from '../components/PostCard';\nimport PostForm from '../components/PostForm';\n\nconst Home = () => {\n  // useSelector 훅을 통해 리덕스 스토어의 상태에 접근 가능함\n  const {\n    isLoggedIn\n  } = useSelector(state => state.user);\n  const {\n    mainPosts\n  } = useSelector(state => state.post);\n  return /*#__PURE__*/_jsxDEV(AppLayouts, {\n    children: [/*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this), isLoggedIn && /*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 28\n    }, this), mainPosts.map(post =>\n    /*#__PURE__*/\n    // 안티패턴 : 인덱스를 키로 쓰면 안된다. 반복되는 것들이 지워질 수 있는 가능성이 있기 때문에 무언가 바뀌지 않은 것이면 키를 인덱스로\n    _jsxDEV(PostCard, {\n      post: post\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Apple Farm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, this);\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/gimminseong/side_project/apple_farm/pratice/apple-farm/src/pages/index.js"],"names":["default","Home","useSelector","AppLayouts","PostCard","PostForm","isLoggedIn","state","user","mainPosts","post","map","id"],"mappings":";;AAAA,SAASA,OAAO,IAAIC,IAApB,QAAgC,QAAhC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;;AAEA,MAAMJ,IAAI,GAAG,MAAM;AACf;AAEA,QAAM;AAAEK,IAAAA;AAAF,MAAiBJ,WAAW,CAACK,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAAlC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAgBP,WAAW,CAACK,KAAK,IAAIA,KAAK,CAACG,IAAhB,CAAjC;AACA,sBACI,QAAC,UAAD;AAAA,4BAGI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,YAHJ,EAIKJ,UAAU,iBAAI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,YAJnB,EAKKG,SAAS,CAACE,GAAV,CAAcD,IAAI;AAAA;AACf;AAEA,YAAC,QAAD;AAAwB,MAAA,IAAI,EAAEA;AAA9B,OAAeA,IAAI,CAACE,EAApB;AAAA;AAAA;AAAA;AAAA,YAHH,CALL,eAUI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH,CAnBD;;AAqBA,eAAeX,IAAf","sourcesContent":["export { default as Home } from './home'\nimport { useSelector } from 'react-redux'\nimport AppLayouts from '../components/AppLayouts'\nimport PostCard from '../components/PostCard'\nimport PostForm from '../components/PostForm'\n\nconst Home = () => {\n    // useSelector 훅을 통해 리덕스 스토어의 상태에 접근 가능함\n\n    const { isLoggedIn } = useSelector(state => state.user)\n    const { mainPosts } = useSelector(state => state.post)\n    return (\n        <AppLayouts>\n            {/* 컴포넌트 이름 부터 정한다 */}\n            {/* 의미가 있는 단위로 컴포넌트를 나눈다. */}\n            <PostForm />\n            {isLoggedIn && <PostForm />}\n            {mainPosts.map(post => (\n                // 안티패턴 : 인덱스를 키로 쓰면 안된다. 반복되는 것들이 지워질 수 있는 가능성이 있기 때문에 무언가 바뀌지 않은 것이면 키를 인덱스로\n\n                <PostCard key={post.id} post={post} />\n            ))}\n            <div>Apple Farm</div>\n        </AppLayouts>\n    )\n}\n\nexport default Home\n"]},"metadata":{},"sourceType":"module"}