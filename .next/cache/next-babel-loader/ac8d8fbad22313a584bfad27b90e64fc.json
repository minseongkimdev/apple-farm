{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/gimminseong/side_project/apple_farm/pratice/apple-farm/src/pages/signup.js\";\nimport React, { useCallback, useState } from 'react';\nimport Head from 'next/head';\nimport { Form } from 'antd';\nimport AppLayouts from '../components/AppLayouts'; // useCallback  : useMemo와 비슷한 훅임안된다 (퍼포먼스 최적화를 위해서 사용되는 훅이다)\n// 리액트 개발자 도구 > Profiler 탭의 Start Profiling기능(녹화 버튼)을 사용하면 컴포넌트의 랜더링을 분석할 수 있다.\n// https://thisblogfor.me/react/hooks_memoization/\n// useMemo는 특정 결과값을 재사용 할 때 사용하는 반면\n// ,useCallback은 특정 함수를 새로 만들지 않고 재사용 하고 싶을 때 사용함\n// useState : 컴포넌트에서 바뀌는 값 관리하기. 컴포넌트에서 상태를 관리할 수 있음!!\n//  16.8 버전에서는 함수형 컴포넌트에서는 상태를 관리할 수 없었다. 하지만 hooks라는 기능을 통해 컴포넌트에서도 상태를 관리할 수 있게 되었음\n// 컴포넌트에서는 동적인 값을 상태라고 부른다. 리액트에서 useState라는 함수가 있는데 이것을 사용하면 컴포넌트에서 상태 관리 가능함\n\nconst Signup = () => {\n  const {\n    0: id,\n    1: setId\n  } = useState('');\n  const onChangeId = useCallback();\n\n  function onSubmit() {}\n\n  return /*#__PURE__*/_jsxDEV(AppLayouts, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"\\uD68C\\uC6D0\\uAC00\\uC785 | NodeBird\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onFinsh: onSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Signup;","map":{"version":3,"sources":["/Users/gimminseong/side_project/apple_farm/pratice/apple-farm/src/pages/signup.js"],"names":["React","useCallback","useState","Head","Form","AppLayouts","Signup","id","setId","onChangeId","onSubmit"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,WAAf,EAA4BC,QAA5B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAAQC,IAAR,QAAmB,MAAnB;AACA,OAAOC,UAAP,MAAuB,0BAAvB,C,CAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;;AAKA,MAAMC,MAAM,GAAG,MAAQ;AACrB,QAAM;AAAA,OAACC,EAAD;AAAA,OAAKC;AAAL,MAAcN,QAAQ,CAAC,EAAD,CAA5B;AACA,QAAMO,UAAU,GAAGR,WAAW,EAA9B;;AAEA,WAASS,QAAT,GAAoB,CAEnB;;AACD,sBAEE,QAAC,UAAD;AAAA,4BAEE,QAAC,IAAD;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF,eAKE,QAAC,IAAD;AAAM,MAAA,OAAO,EAAEA,QAAf;AAAA,6BAEE;AAAA,+BACE;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF;AAqBD,CA5BD;;AA+BA,eAAeJ,MAAf","sourcesContent":["import React, {useCallback, useState} from 'react';\nimport Head from 'next/head';\nimport {Form} from 'antd';\nimport AppLayouts from '../components/AppLayouts';\n\n// useCallback  : useMemo와 비슷한 훅임안된다 (퍼포먼스 최적화를 위해서 사용되는 훅이다)\n// 리액트 개발자 도구 > Profiler 탭의 Start Profiling기능(녹화 버튼)을 사용하면 컴포넌트의 랜더링을 분석할 수 있다.\n// https://thisblogfor.me/react/hooks_memoization/\n\n// useMemo는 특정 결과값을 재사용 할 때 사용하는 반면\n// ,useCallback은 특정 함수를 새로 만들지 않고 재사용 하고 싶을 때 사용함\n\n\n// useState : 컴포넌트에서 바뀌는 값 관리하기. 컴포넌트에서 상태를 관리할 수 있음!!\n//  16.8 버전에서는 함수형 컴포넌트에서는 상태를 관리할 수 없었다. 하지만 hooks라는 기능을 통해 컴포넌트에서도 상태를 관리할 수 있게 되었음\n\n// 컴포넌트에서는 동적인 값을 상태라고 부른다. 리액트에서 useState라는 함수가 있는데 이것을 사용하면 컴포넌트에서 상태 관리 가능함\n\n\n\n\nconst Signup = () =>   {\n  const [id, setId] = useState('');\n  const onChangeId = useCallback() \n\n  function onSubmit() {\n\n  }\n  return (\n\n    <AppLayouts>\n\n      <Head>\n        <title>회원가입 | NodeBird</title>\n      </Head>\n      <Form onFinsh={onSubmit}>\n\n        <div>\n          <label>\n\n          </label>\n        </div>\n\n      </Form>\n\n\n    </AppLayouts>\n  );\n\n};\n\n\nexport default Signup;"]},"metadata":{},"sourceType":"module"}