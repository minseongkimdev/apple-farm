{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { HYDRATE } from 'next-redux-wrapper';\nimport { combineReducers } from 'redux';\nconst initialState = {};\nimport user from './user';\nimport post from './post'; // 액션을 동적으로 만들어 주는 함수\n// 액션 크리에이터\n//\n// 사용자가 어떻게 닉ㄴ임을 바꿀지 모르기 때문에 동적으로 액션을 생성하는 액션 크리에이터\n// const changeNickname = {\n//     type: 'CHANGE_NICKNAME',\n//     data: 'Apple Farm'\n// }\n// 이전 상태와 액션을 통해서 -> 다음 상태를 만들어내는 함수\n// 리듀서 : 차원 축소 (이전상태, 액션) -> 을 다음 상태로 차원을 축소함\n// combine Reducer을 통해서 여러개의 리듀서를 합칠 수 있다.\n\nconst rootReducer = combineReducers({\n  index: (state = {}, action) => {\n    // 서버 사이드 렌더링을 위해서 HYDRATE분기만 추가\n    // 각 initial state는 combineReducer가 알아서 넣어준다.\n    // ,,,state를 서줘야 이전 상태에 참조가 되면서 메모리를 절약할 수 있다.\n    // 배포 모드일 때는 히스토리를 버린다. 배포 모드에서는 문제가 생기지 않는다.\n    switch (action.type) {\n      case HYDRATE:\n        console.log('HYDRATE' + HYDRATE);\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      default:\n        return state;\n    }\n  },\n  user,\n  post\n});\nexport default rootReducer;","map":{"version":3,"sources":["/Users/gimminseong/side_project/apple_farm/pratice/apple-farm/src/reducers/index.js"],"names":["HYDRATE","combineReducers","initialState","user","post","rootReducer","index","state","action","type","console","log","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA,MAAMC,YAAY,GAAG,EAArB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AACA,MAAMC,WAAW,GAAGJ,eAAe,CAAC;AAChCK,EAAAA,KAAK,EAAE,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAC3B;AACA;AACA;AACA;AACA,YAAQA,MAAM,CAACC,IAAf;AACI,WAAKT,OAAL;AACIU,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAYX,OAAxB;AACA,+CAAWO,KAAX,GAAqBC,MAAM,CAACI,OAA5B;;AAEJ;AACI,eAAOL,KAAP;AANR;AAQH,GAd+B;AAehCJ,EAAAA,IAfgC;AAgBhCC,EAAAA;AAhBgC,CAAD,CAAnC;AAmBA,eAAeC,WAAf","sourcesContent":["import { HYDRATE } from 'next-redux-wrapper'\nimport { combineReducers } from 'redux'\nconst initialState = {}\nimport user from './user'\nimport post from './post'\n// 액션을 동적으로 만들어 주는 함수\n// 액션 크리에이터\n//\n\n\n// 사용자가 어떻게 닉ㄴ임을 바꿀지 모르기 때문에 동적으로 액션을 생성하는 액션 크리에이터\n// const changeNickname = {\n//     type: 'CHANGE_NICKNAME',\n//     data: 'Apple Farm'\n// }\n\n// 이전 상태와 액션을 통해서 -> 다음 상태를 만들어내는 함수\n// 리듀서 : 차원 축소 (이전상태, 액션) -> 을 다음 상태로 차원을 축소함\n\n// combine Reducer을 통해서 여러개의 리듀서를 합칠 수 있다.\nconst rootReducer = combineReducers({\n    index: (state = {}, action) => {\n        // 서버 사이드 렌더링을 위해서 HYDRATE분기만 추가\n        // 각 initial state는 combineReducer가 알아서 넣어준다.\n        // ,,,state를 서줘야 이전 상태에 참조가 되면서 메모리를 절약할 수 있다.\n        // 배포 모드일 때는 히스토리를 버린다. 배포 모드에서는 문제가 생기지 않는다.\n        switch (action.type) {\n            case HYDRATE:\n                console.log('HYDRATE' + HYDRATE)\n                return {...state, ...action.payload}\n\n            default:\n                return state\n        }\n    },\n    user,\n    post,\n})\n\nexport default rootReducer\n"]},"metadata":{},"sourceType":"module"}