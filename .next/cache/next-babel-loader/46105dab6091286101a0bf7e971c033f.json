{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// 데이터를 구성하고,  액션, 리듀서부터 구성한다.\n// 화면은 데이터의 변경 기준으로 짠다\nconst initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: ''\n    },\n    content: '',\n    Images: [{\n      src: ''\n    }, {\n      src: ''\n    }, {\n      src: ''\n    }],\n    Commnents: [{\n      User: {\n        nickname: ''\n      },\n      content: ''\n    }]\n  }]\n}; // 상수로 빼서 나중에 재활용, 오타 위험 적음\n\nconst ADD_POST = 'ADD_POST'; // 액션 객체, 동적이어야 한다면 동적 객체\n\nexport const addPost = {\n  // 액션의 타입\n  type: ADD_POST\n};\nconst dummyPost = {};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        // 앞에다가 추가해야 제일 최근의 게시글이 맨 위로 올라간다.\n        mainPost: [dummyPost, ...state.mainPosts],\n        postAdded: true\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/gimminseong/side_project/apple_farm/pratice/apple-farm/src/reducers/post.js"],"names":["initialState","mainPosts","id","User","nickname","content","Images","src","Commnents","ADD_POST","addPost","type","dummyPost","reducer","state","action","mainPost","postAdded"],"mappings":";;;;;;AAAA;AACA;AACA,MAAMA,YAAY,GAAG;AACjBC,EAAAA,SAAS,EAAE,CACP;AACIC,IAAAA,EAAE,EAAE,CADR;AAEIC,IAAAA,IAAI,EAAE;AACFD,MAAAA,EAAE,EAAE,CADF;AAEFE,MAAAA,QAAQ,EAAE;AAFR,KAFV;AAMIC,IAAAA,OAAO,EAAE,EANb;AAOIC,IAAAA,MAAM,EAAE,CACJ;AACIC,MAAAA,GAAG,EAAE;AADT,KADI,EAIJ;AACIA,MAAAA,GAAG,EAAE;AADT,KAJI,EAOJ;AACIA,MAAAA,GAAG,EAAE;AADT,KAPI,CAPZ;AAkBIC,IAAAA,SAAS,EAAE,CACP;AACIL,MAAAA,IAAI,EAAE;AACFC,QAAAA,QAAQ,EAAE;AADR,OADV;AAIIC,MAAAA,OAAO,EAAE;AAJb,KADO;AAlBf,GADO;AADM,CAArB,C,CA+BA;;AACA,MAAMI,QAAQ,GAAG,UAAjB,C,CAEA;;AACA,OAAO,MAAMC,OAAO,GAAG;AACnB;AACAC,EAAAA,IAAI,EAAEF;AAFa,CAAhB;AAKP,MAAMG,SAAS,GAAG,EAAlB;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGd,YAAT,EAAuBe,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACJ,IAAf;AACI,SAAKF,QAAL;AACI,6CACOK,KADP;AAEI;AACAE,QAAAA,QAAQ,EAAE,CAACJ,SAAD,EAAY,GAAGE,KAAK,CAACb,SAArB,CAHd;AAIIgB,QAAAA,SAAS,EAAE;AAJf;;AAOJ;AACI,aAAOH,KAAP;AAVR;AAYH,CAbD;;AAeA,eAAeD,OAAf","sourcesContent":["// 데이터를 구성하고,  액션, 리듀서부터 구성한다.\n// 화면은 데이터의 변경 기준으로 짠다\nconst initialState = {\n    mainPosts: [\n        {\n            id: 1,\n            User: {\n                id: 1,\n                nickname: '',\n            },\n            content: '',\n            Images: [\n                {\n                    src: '',\n                },\n                {\n                    src: '',\n                },\n                {\n                    src: '',\n                },\n            ],\n            Commnents: [\n                {\n                    User: {\n                        nickname: '',\n                    },\n                    content: '',\n                },\n            ],\n        },\n    ],\n}\n// 상수로 빼서 나중에 재활용, 오타 위험 적음\nconst ADD_POST = 'ADD_POST'\n\n// 액션 객체, 동적이어야 한다면 동적 객체\nexport const addPost = {\n    // 액션의 타입\n    type: ADD_POST,\n}\n\nconst dummyPost = {}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ADD_POST:\n            return {\n                ...state,\n                // 앞에다가 추가해야 제일 최근의 게시글이 맨 위로 올라간다.\n                mainPost: [dummyPost, ...state.mainPosts],\n                postAdded: true,\n            }\n\n        default:\n            return state\n    }\n}\n\nexport default reducer\n"]},"metadata":{},"sourceType":"module"}