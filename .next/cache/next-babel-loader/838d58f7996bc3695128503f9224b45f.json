{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/gimminseong/side_project/apple_farm/pratice/apple-farm/src/pages/index.js\",\n    _s = $RefreshSig$();\n\nimport { useSelector } from 'react-redux';\nimport AppLayouts from '../components/AppLayouts';\nimport PostCard from '../components/PostCard';\nimport PostForm from '../components/PostForm';\nimport Category from '../components/Category';\n\nconst Home = () => {\n  _s();\n\n  // useSelector 훅을 통해 리덕스 스토어의 상태에 접근 가능함\n  const {\n    isLoggedIn\n  } = useSelector(state => state.user);\n  const {\n    mainPosts\n  } = useSelector(state => state.post);\n  return /*#__PURE__*/_jsxDEV(AppLayouts, {\n    children: [/*#__PURE__*/_jsxDEV(Category, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this), isLoggedIn && /*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 28\n    }, this), mainPosts.map(post =>\n    /*#__PURE__*/\n    // 안티패턴 : 인덱스를 키로 쓰면 안된다. 반복되는 것들이 지워질 수 있는 가능성이 있기 때문에 무언가 바뀌지 않은 것이면 키를 인덱스로\n    // 의미가 있는 단위부터 먼저 컴포넌트로 나누고 그다음에 컴포넌트를 구현하라때\n    _jsxDEV(PostCard, {\n      post: post\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Home, \"yViitBsbbl69mW3t/o7jzus6gBQ=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/gimminseong/side_project/apple_farm/pratice/apple-farm/src/pages/index.js"],"names":["useSelector","AppLayouts","PostCard","PostForm","Category","Home","isLoggedIn","state","user","mainPosts","post","map","id"],"mappings":";;;;;AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACf;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAAiBN,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAAlC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAgBT,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACG,IAAhB,CAAjC;AACA,sBAEI,QAAC,UAAD;AAAA,4BAII,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,YAJJ,EAKKJ,UAAU,iBAAI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,YALnB,EAMKG,SAAS,CAACE,GAAV,CAAcD,IAAI;AAAA;AACf;AACA;AACA,YAAC,QAAD;AAAwB,MAAA,IAAI,EAAEA;AAA9B,OAAeA,IAAI,CAACE,EAApB;AAAA;AAAA;AAAA;AAAA,YAHH,CANL;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ;AAgBH,CArBD;;GAAMP,I;UAGqBL,W,EACDA,W;;;KAJpBK,I;AAuBN,eAAeA,IAAf","sourcesContent":["import { useSelector } from 'react-redux';\nimport AppLayouts from '../components/AppLayouts';\nimport PostCard from '../components/PostCard';\nimport PostForm from '../components/PostForm';\nimport Category from '../components/Category';\n\nconst Home = () => {\n    // useSelector 훅을 통해 리덕스 스토어의 상태에 접근 가능함\n\n    const { isLoggedIn } = useSelector(state => state.user)\n    const { mainPosts } = useSelector(state => state.post)\n    return (\n        \n        <AppLayouts>\n            {/* 컴포넌트 이름 부터 정한다 */}\n            {/* 의미가 있는 단위로 컴포넌트를 나눈다. */}\n            {/* 로그인 되어 있을 때만 포스트 폼이 보이도록 한다 */}\n            <Category/>\n            {isLoggedIn && <PostForm />}\n            {mainPosts.map(post => \n                // 안티패턴 : 인덱스를 키로 쓰면 안된다. 반복되는 것들이 지워질 수 있는 가능성이 있기 때문에 무언가 바뀌지 않은 것이면 키를 인덱스로\n                // 의미가 있는 단위부터 먼저 컴포넌트로 나누고 그다음에 컴포넌트를 구현하라때\n                <PostCard key={post.id} post={post} />\n            )}\n            \n        </AppLayouts>\n    )\n}\n\nexport default Home\n"]},"metadata":{},"sourceType":"module"}